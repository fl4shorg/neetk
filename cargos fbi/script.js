// Fun√ß√£o para copiar texto para o clipboard e mostrar notifica√ß√£o
function copyText(text) {
    const input = document.createElement('input');
    input.setAttribute('value', text);
    document.body.appendChild(input);
    input.select();
    document.execCommand('copy');
    document.body.removeChild(input);
    showNotification('Texto copiado: ' + text);
}

// Fun√ß√£o para mostrar notifica√ß√£o
function showNotification(message) {
    const notification = document.getElementById('notification');
    notification.innerText = message;
    notification.style.display = 'block';
    setTimeout(() => {
        notification.style.display = 'none';
    }, 3000);
}

// Fun√ß√£o para fechar o widget do Instagram
function closeWidget() {
    document.querySelector('.insta-widget').style.display = 'none';
}

// Fun√ß√£o para fechar o modal
function agree() {
    document.getElementById('modal').style.display = 'none';
}

// Obter o IP do usu√°rio
fetch('https://api.ipify.org?format=json')
    .then(response => response.json())
    .then(data => {
        document.getElementById('ipValue').innerText = data.ip;
        document.getElementById('ipWarning').innerText = data.ip;
    })
    .catch(error => console.error('Erro ao buscar IP:', error));

// Exibir modal e container
document.getElementById('modal').style.display = 'flex';
document.getElementById('container').style.display = 'block';

// Contador de visitas usando localStorage
let visitCount = localStorage.getItem('visitCount') || 0;
visitCount = parseInt(visitCount) + 1;
localStorage.setItem('visitCount', visitCount);
document.getElementById('visitValue').innerText = visitCount;

// Fun√ß√£o para obter o n√≠vel de bateria
navigator.getBattery().then(function(battery) {
    document.getElementById('batteryValue').innerText = Math.round(battery.level * 100);
    battery.addEventListener('levelchange', function() {
        document.getElementById('batteryValue').innerText = Math.round(battery.level * 100);
    });
});

// Fun√ß√£o para obter informa√ß√µes do dispositivo
function getDeviceInfo() {
    const userAgent = navigator.userAgent;
    let deviceInfo;

    if (/Android/i.test(userAgent)) {
        deviceInfo = "Android";
    } else if (/iPhone/i.test(userAgent)) {
        deviceInfo = "iPhone";
    } else if (/iPad/i.test(userAgent)) {
        deviceInfo = "iPad";
    } else if (/Windows/i.test(userAgent)) {
        deviceInfo = "Windows PC";
    } else if (/Macintosh/i.test(userAgent)) {
        deviceInfo = "Mac OS";
    } else if (/Linux/i.test(userAgent)) {
        deviceInfo = "Linux PC";
    } else if (/Tablet/i.test(userAgent)) {
        deviceInfo = "Tablet";
    } else if (/Mobile/i.test(userAgent)) {
        deviceInfo = "Dispositivo M√≥vel";
    } else {
        deviceInfo = "Desktop";
    }

    document.getElementById('deviceValue').innerText = deviceInfo;
}

// Fun√ß√£o para fechar a notifica√ß√£o
function closeNotification() {
    document.getElementById('notificationWidget').style.display = 'none';
}

function agree() {
        // Obter o elemento de √°udio
        const audio = document.getElementById('background-audio');

        // Tocar a m√∫sica (caso n√£o esteja tocando)
        if (audio.paused) {
            audio.play();
        }

        // Fechar o modal (opcional)
        document.getElementById('modal').style.display = 'none';
    }
    
    function getGreeting() {
    const now = new Date();
    const hour = now.getHours();
    const username = "usu√°rio";  // Nome do usu√°rio, voc√™ pode dinamizar se necess√°rio.
    let greeting = "";
    let startEmoji = "";  // Emoji no in√≠cio
    let endEmoji = "";    // Emoji no final

    // Definindo emojis para o in√≠cio e fim da sauda√ß√£o
    if (hour >= 6 && hour < 12) {
      startEmoji = "üë®‚Äçüíª";  // Emoji de usu√°rio ou trabalhador
      greeting = "Bom dia, " + username + "!";
      endEmoji = "üåû";  // Emoji de sol para "Bom dia"
    } else if (hour >= 12 && hour < 18) {
      startEmoji = "üëã";  // Emoji de cumprimento
      greeting = "Boa tarde, " + username + "!";
      endEmoji = "‚òÄÔ∏è";  // Emoji de sol para "Boa tarde"
    } else if (hour >= 18 && hour < 23) {
      startEmoji = "üåô";  // Emoji de lua, pode simbolizar noite
      greeting = "Boa noite, " + username + "!";
      endEmoji = "üåú";  // Emoji de lua crescente para "Boa noite"
    } else {
      startEmoji = "üåú";  // Emoji de lua
      greeting = "Boa madrugada, " + username + "!";
      endEmoji = "üåô";  // Outro emoji de lua para madrugada
    }

    // Exibe a sauda√ß√£o com os emojis de in√≠cio e fim
    document.getElementById("greeting").innerHTML = startEmoji + " " + greeting + " " + endEmoji;
  }


// Fun√ß√£o para atualizar a sauda√ß√£o de acordo com o hor√°rio
function updateGreeting() {
    const now = new Date();
    const hour = now.getHours();
    let greeting;

    if (hour < 6) {
        greeting = "Boa madrugada!";
    } else if (hour < 12) {
        greeting = "Bom dia!";
    } else if (hour < 18) {
        greeting = "Boa tarde!";
    } else {
        greeting = "Boa noite!";
    }

    document.getElementById('greeting').innerText = `${greeting} Bem-vindo!`;
}
// Mapeamento de estados e suas siglas
const estados = {
    "Acre": "AC",
    "Alagoas": "AL",
    "Amap√°": "AP",
    "Amazonas": "AM",
    "Bahia": "BA",
    "Cear√°": "CE",
    "Distrito Federal": "DF",
    "Esp√≠rito Santo": "ES",
    "Goi√°s": "GO",
    "Maranh√£o": "MA",
    "Mato Grosso": "MT",
    "Mato Grosso do Sul": "MS",
    "Minas Gerais": "MG",
    "Par√°": "PA",
    "Para√≠ba": "PB",
    "Paran√°": "PR",
    "Pernambuco": "PE",
    "Piau√≠": "PI",
    "Rio de Janeiro": "RJ",
    "Rio Grande do Norte": "RN",
    "Rio Grande do Sul": "RS",
    "Rond√¥nia": "RO",
    "Roraima": "RR",
    "S√£o Paulo": "SP",
    "Sergipe": "SE",
    "Tocantins": "TO",
};

function getLocation() {
    // Usando a API ip-api para obter a localiza√ß√£o do usu√°rio
    fetch('https://ip-api.com/json/')
      .then(response => response.json())
      .then(data => {
        if (data.status === "success") {
            const region = data.regionName; // Pega o estado ou regi√£o
            const estadoSigla = estados[region] || "Estado desconhecido"; // Obt√©m a sigla
            document.getElementById("location").innerHTML = `Voc√™ est√° acessando de: ${region} (${estadoSigla})`;
        } else {
            document.getElementById("location").innerHTML = "N√£o foi poss√≠vel obter a localiza√ß√£o.";
        }
      })
      .catch(error => {
        document.getElementById("location").innerHTML = "Erro ao obter a localiza√ß√£o.";
        console.error('Erro ao obter a localiza√ß√£o:', error);
      });
}






// Inicializa√ß√µes
window.onload = function() {
    updateGreeting(); // Atualiza a sauda√ß√£o
    getDeviceInfo(); 
    getGreeting();
    getLocation();
    // Obt√©m informa√ß√µes do dispositivo
};
